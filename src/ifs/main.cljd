(ns ifs.main
  "main"
  (:require ["package:flutter/material.dart" :as m]
            ["dart:ui" :as ui]
            ["package:flutter/gestures.dart" :as g]
            ["package:vector_math/vector_math_64.dart" :as vm]
            [cljd.flutter.alpha :as f]))

(defn create-picture
  [p1 p2]
  (let [paint (m/Paint)
        picture-recorder (ui/PictureRecorder)
        pic-canvas (m/Canvas picture-recorder)]
    (set! (.color paint) m.Colors/black)
    (set! (.strokeWidth paint) 4)
    (.drawLine pic-canvas p1 p2 paint)
    (.endRecording picture-recorder)))

(defn transform [pic n ^m/Size size transforms]
  (if (pos? n)
    (let [picN-1 (transform pic (dec n) size transforms)
          pic-recorder (ui/PictureRecorder)
          rec-paint (m/Paint)
          canvas (m/Canvas pic-recorder)]
      (set! (.color rec-paint) m.Colors/pink)
      (set! (.style rec-paint) (m.PaintingStyle/stroke))
      (doto canvas
        (.drawPicture pic))
      (doseq [t transforms]
        (doto canvas
          .save
          (.transform t)
          (.drawPicture picN-1)
          .restore))
      (.endRecording pic-recorder))
    pic))

(defn to-matrix
  [[^m/Offset o ^m/Offset a ^m/Offset b] width height]
  (let [oa (.- a o)
        ob (.- b o)]
    (.storage
     (vm/Matrix4
      (/ (.-dx oa) width) (/ (.-dy oa) height) 0 0
      (/ (.-dx ob) width) (/ (.-dy ob) height) 0 0
      0          0        1 0
      (.-dx o) (.-dy  o)  0 1))))

(def radius 10)
(def graph
  (f/widget
   :inherit [:transforms]
   :state [state {:delta nil
                  :active-handle nil}]
   (m/GestureDetector
    :onScaleStart
    (fn [^g/ScaleStartDetails details]
      (let [pointer (.localFocalPoint details)]
        (let [[best delta]
              (or
               (reduce
                (fn [[_ d :as best] [candidate c]]
                  (let [d' (.- pointer c)
                        l' (.-distance d')
                        l (if d (.-distance d) l')]
                    (if (<= l' l radius)
                      [candidate d']
                      best)))
                nil
                (for [[i transform] (map-indexed vector @transforms)
                      [j offset] (map-indexed vector transform)]
                  [[i j] offset]))
               (first
                (keep-indexed
                 (fn [i [o a b]]
                   (let [oa (.- a o)
                         ob (.- b o)
                         m-1 (doto (vm/Matrix3
                                    (.-dx oa) (.-dy oa) 0
                                    (.-dx ob) (.-dy ob) 0
                                    (.-dx o)  (.-dy o)  1)
                               .invert)
                         p' (.* m-1 (vm/Vector3 (.-dx pointer) (.-dy pointer) 1))]
                     (when (and (<= 0 (.-x p') 1) (<= 0 (.-y p') 1))
                       [[i] (.- pointer o)])))
                 @transforms)))]
          (dart:core/print @transforms)
          (swap! state assoc :delta delta :active-handle best))))
    :onScaleUpdate
    (fn [^g/ScaleUpdateDetails details]
      (dart:core/print @transforms)
      (let [{:keys [active-handle delta]} @state]
        (case (count active-handle)
          1
          (swap! transforms update-in active-handle
                 (fn [[o a b]]
                   (let [o' (.- (.localFocalPoint details) delta)
                         t (.- o' o)]
                     [o' (.+ a t) (.+ b t)])))
          2
          (swap! transforms assoc-in active-handle
                 (.- (.localFocalPoint details) delta))
          nil)))
    :behavior m.HitTestBehavior/opaque
    :dragStartBehavior g.DragStartBehavior/start
    :child
    (m/CustomPaint
     :painter
     (reify :extends m/CustomPainter
       (paint [this canvas size]
         (let [paint (m/Paint)]
           (set! (.color paint) m.Colors/blue)
           (set! (.style paint) m.PaintingStyle/fill)
           (doseq [[o a b :as points] @transforms]
             (doto canvas
               (.drawLine o a paint)
               (.drawLine o b paint)
               (.drawLine a (.+ b (.- a o)) paint)
               (.drawLine b (.+ b (.- a o)) paint))
             (doseq [p points]
               (.drawCircle canvas p radius paint)))
           (let [middle-width (/ (.width size) 2)
                 p1 (m/Offset middle-width (- (.height size) 255))
                 p2 (m/Offset middle-width (- (.height size) 5))]
             (.drawPicture canvas (transform (create-picture p1 p2) 6 size (map #(to-matrix % (.-width size) (.-height size)) @transforms))))))
       (shouldRepaint [this _] true))
     :child (m/Container)))))


(def gesture-parallelogram
  (f/widget
   :inherit [:transforms]
   (m/Scaffold
    :floatingActionButton
    (m/FloatingActionButton
     :onPressed (fn [] (swap! transforms conj [(m/Offset 150 150) (m/Offset 650 150) (m/Offset 150 350)]))
     :tooltip "Add a parallelogram"
     :child (m/Icon m.Icons/add))
    :body
    (m/Container
     :child graph))))


(defn main []
  (m/runApp
   (m/MaterialApp
    :title "Gesture Demo App"
    :home
    (f/widget
     :bind {:transforms [[(m/Offset 150 150) (m/Offset 350 150) (m/Offset 150 350)]
                         [(m/Offset 450 150) (m/Offset 650 150) (m/Offset 150 350)]]}
     gesture-parallelogram))))
