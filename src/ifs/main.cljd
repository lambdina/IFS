(ns ifs.main
  "main"
  (:require ["package:flutter/material.dart" :as m]
            ["dart:ui" :as ui]
            ["package:flutter/gestures.dart" :as g]
            ["package:vector_math/vector_math_64.dart" :as vm]
            [cljd.flutter.alpha :as f]))

(def radius 30.0)

(defn inside-parallelogram
  [[^m/Offset o ^m/Offset a ^m/Offset b] ^m/Offset mouse-pos]
  (let [oa (.- a o)
        ob (.- b o)
        m (doto
           (vm/Matrix3 (.-dx oa) (.-dy oa) 0
                       (.-dx ob) (.-dy ob) 0
                       (.-dx o)  (.-dy o)  1)
            .invert)
        p-1 (.transform m (vm/Vector3 (.-dx mouse-pos) (.-dy mouse-pos) 1))]
    (when (and (<= 0 (.-x p-1) 1) (<= 0 (.-y p-1) 1))
      (.- mouse-pos o))))

(defn move-to
  [[^m/Offset o ^m/Offset a ^m/Offset b] ^m/Offset o']
  (let [oo' (.- o' o)]
    [o' (.+ a oo') (.+ b oo')]))

(defn draw-parallelogram
  [canvas [o a b]]
  (let [paint (m/Paint)]
    (set! (.color paint) m.Colors/grey)
    (set! (.style paint) m.PaintingStyle/fill)
     (doto canvas
       (.drawLine o a paint)
       (.drawLine o b paint)
       (.drawLine a (.+ b (.- a o)) paint)
       (.drawLine b (.+ b (.- a o)) paint))
      (doseq [p [o a b]]
        (.drawCircle canvas p radius paint))))

(defn next-pic [pic0 transforms picN-1]
  (let [picture-recorder (ui/PictureRecorder)
        canvas (m/Canvas picture-recorder)]
    (.drawPicture canvas pic0)
    (doseq [t transforms]
      (doto canvas
        .save
        (.transform t)
        (.drawPicture picN-1)
        .restore))
    (.endRecording picture-recorder)))

(def custom-painter
  (f/widget
   :inherit [m/MediaQuery]
   (f/widget
    :state [state {:transform [(m/Offset 50 50) (m/Offset (- (-> media-query .-size .-width) 50) 50) (m/Offset 50 (- (-> media-query .-size .-height) 65))]
                   :delta nil
                   :dragged nil}]
    (m/GestureDetector
     .onPanStart
     (fn [^g/DragStartDetails details]
       (let [{:keys [transform]} @state
             pointer (.-localPosition details)
             [[id delta]]
             (concat
              (for [[i vertex] (map-indexed vector transform)
                    :let [delta (.- pointer vertex)]
                    :when (< (.-distance delta) radius)]
                [i delta])
              (when-some [delta (inside-parallelogram transform pointer)]
                [[:parallelogram delta]]))]
         (swap! state assoc :dragged id :delta delta)))
     .onPanUpdate
     (fn [^g/DragUpdateDetails details]
       (let [{:keys [dragged delta]} @state
             new-pos (when dragged (.- (.-localPosition details) delta))]
         (cond
           (= dragged :parallelogram)
           (swap! state update :transform move-to new-pos)
           (int? dragged)
           (swap! state assoc-in [:transform dragged] new-pos))))
     :child
     (m/CustomPaint
      .size (m/Size double/infinity double/infinity)
      :painter
      (reify :extends m/CustomPainter
        (paint [this canvas size]
          (let [[^m/Offset o ^m/Offset a ^m/Offset b] (:transform @state)
                oa (.- a o)
                ob (.- b o)
                transforms (.storage
                            (doto (vm/Matrix4.diagonal3Values (/ (.-width size)) (/ (.-height size)) 0)
                              (.multiply (vm/Matrix4
                                          (.-dx oa) (.-dy oa) 0 0
                                          (.-dx ob) (.-dy ob) 0 0
                                          0         0         0 0
                                          (.-dx o)  (.-dy o)  0 1))))
                middle-width (/ (.width size) 2)
                sticks [(m/Offset middle-width (- (.height size) 200)) (m/Offset middle-width (- (.height size) 10))
                        (m/Offset (- middle-width 50) (- (.height size) 150)) (m/Offset middle-width  (- (.height size) 190))
                        (m/Offset (+ middle-width 50) (- (.height size) 250)) (m/Offset middle-width  (- (.height size) 190))]
                pic0
                (.endRecording
                 (let [pr (ui/PictureRecorder)
                       canvas (m/Canvas pr)]
                   (doseq [[x y] (partition 2 sticks)]

                     (.drawLine canvas x y
                                (doto (m/Paint)
                                  (-> .color (set! m.Colors/black))
                                  (-> .strokeWidth (set! 5)))))
                   pr))]
            (dart:core/print transforms)
            (.drawPicture canvas
                          ((apply comp (repeat 10 #(next-pic pic0 [transforms] %)))
                           pic0))
            (draw-parallelogram canvas (:transform @state))))
        (shouldRepaint [this _] true))
      :child (m/Container))))))


(defn main []
  (m/runApp
   (m/MaterialApp
    :title "ifs"
    :home
    (m/Scaffold
     :appBar (m/AppBar :title (m/Text "ifs") :backgroundColor (m.Colors/pink))
     :body custom-painter))))
